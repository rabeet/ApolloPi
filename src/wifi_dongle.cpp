//////////////////////////////////////////////////////////////////////////////
// Model: apollo_pi.qm
// File:  ./src/wifi_dongle.cpp
//
// This file has been generated automatically by QP Modeler (QM).
// DO NOT EDIT THIS FILE MANUALLY.
//
// Please visit www.state-machine.com/qm for more information.
//////////////////////////////////////////////////////////////////////////////
#include "qp_port.h"
#include "bsp.h"
#include "apollo_pi.h"

#include <linux/wireless.h>
#include <sys/ioctl.h>
#include <iostream>
#include <cstring>

namespace ApolloPi {

// @(/1/2) ...................................................................
// @(/1/2/3) .................................................................
WifiDongle::WifiDongle() 
  : QActive(Q_STATE_CAST(&WifiDongle::initial)),
    updateEvt(UPDATE_WIFI_DONGLE_SIG),
    update_ival_(5)
{
}

// @(/1/2/4) .................................................................
char * WifiDongle::update_status() {
    // obtain signal quality
    // create JSON string
    // return string

    iw_statistics stats;
    iwreq req;

    std::strcpy(req.ifr_name, IW_NAME);
    req.u.data.pointer = &stats;
    req.u.data.length = sizeof(iw_statistics);
    req.u.data.flags = 1;

    // this probably isn't safe...
    int client_fd_
        = ((WebSocketServer *)AO_WebSocketServer)->get_socket_fd();

    if (ioctl(client_fd_, SIOCGIWSTATS, &req) == -1)
    {
        perror("WifiDongle update");
        // set json_status_ "msg" : -1
    }
    else
    {
        if (!(stats.qual.updated & IW_QUAL_QUAL_UPDATED))
        {
            return json_status_; // nothing was updated
        }

        // update status with signal quality
        std::memset(json_status_, 0, BUF_SIZE);

        // set json_status_ (units may not be dBm)
        // "msg" : { "qual" : <qual>, "units": "dBm" }

        std::sprintf(json_status_,
            "{\"src\":\"WifiDongle\","
              "\"msg\":%d}",
            stats.qual.qual);

        return json_status_;
    }
}
// @(/1/2/5) .................................................................
void WifiDongle::update() {
    SendEvt *se =
        Q_NEW(SendEvt, SEND_SIG);

    char *data = update_status();

    // Frame the data. Dont forget to dealloc from the Server!
    se->set_frame(WebSocketFrame::make_frame(data, std::strlen(data)));

    // post event direct to server
    AO_WebSocketServer->postFIFO(se);
}
// @(/1/2/6) .................................................................
// @(/1/2/6/0)
QP::QState WifiDongle::initial(WifiDongle * const me, QP::QEvt const * const e) {
    me->subscribe(CONNECTED_SIG);
    me->subscribe(DISCONNECTED_SIG);

    return Q_TRAN(&WifiDongle::inactive);
}
// @(/1/2/6/1) ...............................................................
QP::QState WifiDongle::active(WifiDongle * const me, QP::QEvt const * const e) {
    QP::QState status;
    switch (e->sig) {
        // @(/1/2/6/1)
        case Q_ENTRY_SIG: {
            // arm periodic update
            me->updateEvt.postEvery((QActive *)me,
                                    me->update_ival_ * BSP_TICKS_PER_SEC);

            // force update
            me->update();
            status = Q_HANDLED();
            break;
        }
        // @(/1/2/6/1)
        case Q_EXIT_SIG: {
            me->updateEvt.disarm();
            status = Q_HANDLED();
            break;
        }
        // @(/1/2/6/1/0)
        case UPDATE_WIFI_DONGLE_SIG: {
            me->update();
            status = Q_HANDLED();
            break;
        }
        // @(/1/2/6/1/1)
        case DISCONNECTED_SIG: {
            status = Q_TRAN(&WifiDongle::inactive);
            break;
        }
        default: {
            status = Q_SUPER(&QHsm::top);
            break;
        }
    }
    return status;
}
// @(/1/2/6/2) ...............................................................
QP::QState WifiDongle::inactive(WifiDongle * const me, QP::QEvt const * const e) {
    QP::QState status;
    switch (e->sig) {
        // @(/1/2/6/2/0)
        case CONNECTED_SIG: {
            status = Q_TRAN(&WifiDongle::active);
            break;
        }
        default: {
            status = Q_SUPER(&QHsm::top);
            break;
        }
    }
    return status;
}


static WifiDongle l_dongle; // the dongle Active Object
QP::QActive * const AO_WifiDongle = (QP::QActive *)&l_dongle;

} /* namespace ApolloPi */
