//////////////////////////////////////////////////////////////////////////////
// Model: apollo_pi.qm
// File:  ./src/rover.h
//
// This file has been generated automatically by QP Modeler (QM).
// DO NOT EDIT THIS FILE MANUALLY.
//
// Please visit www.state-machine.com/qm for more information.
//////////////////////////////////////////////////////////////////////////////
#ifndef rover_h
#define rover_h

#include "qp_port.h"
#include "apollo_pi.h"

namespace ApolloPi {

/* AOs */
// @(/2/0) ...................................................................
class MotorController : public QP::QActive {
public:
    /// The RPi pin connected to the EN pin on the H-bridge motor buffer.
    const int DIRECTION = 0;
    const int MOTOR = 1;

public:
    MotorController();
    /// Dispatches control signals to attached motors.
    void update_motors(MotorControllerEvt * mce);
    void brake();
    /// Sets the EN pin to HIGH, which enables the motor circuit.
    void enable();
    void init_pins();

protected:
    static QP::QState initial(MotorController * const me, QP::QEvt const * const e);
    static QP::QState initialized(MotorController * const me, QP::QEvt const * const e);
};

/* HSMs */
// @(/2/1) ...................................................................
class Motor : public QP::QHsm {
private:
    /// RPi pin connected to the motor controller pin 1A.
    int A1;
    /// RPi Pin connected to the motor controller pin 2A.
    int A2;

public:
    Motor(int a1, int a2);
    /// Updates the motors operating parameters. This implementation controls speed and direction using signed, 8-bit integers.
    void update(int8_t speed);

private:
    void brake();
    void forward();
    void backward();

public:
    void init_pins();

protected:
    static QP::QState initial(Motor * const me, QP::QEvt const * const e);
    static QP::QState attached(Motor * const me, QP::QEvt const * const e);
};
// @(/2/2) ...................................................................
class Camera : public QP::QHsm {
public:
    Camera();

protected:
    static QP::QState initial(Camera * const me, QP::QEvt const * const e);
    static QP::QState initialized(Camera * const me, QP::QEvt const * const e);
};

extern QP::QActive * const AO_MotorController;
extern QP::QHsm    * const HSM_Camera;

} /* namespace ApolloPi */

#endif /* rover_h */
