//////////////////////////////////////////////////////////////////////////////
// Model: apollo_pi.qm
// File:  ./src/status_led.cpp
//
// This file has been generated automatically by QP Modeler (QM).
// DO NOT EDIT THIS FILE MANUALLY.
//
// Please visit www.state-machine.com/qm for more information.
//////////////////////////////////////////////////////////////////////////////
#include "qp_port.h"
#include "apollo_pi.h"

#include <wiringPi.h>
#include <iostream>

namespace ApolloPi {

// @(/1/4) ...................................................................
// @(/1/4/0) .................................................................
StatusLed::StatusLed() 
  : QActive(Q_STATE_CAST(&StatusLed::initial))
{
}

// @(/1/4/1) .................................................................
void StatusLed::red_on() {
    digitalWrite(7, LOW);
}
// @(/1/4/2) .................................................................
void StatusLed::green_on() {
    digitalWrite(7, HIGH);
}
// @(/1/4/3) .................................................................
// @(/1/4/3/0)
QP::QState StatusLed::initial(StatusLed * const me, QP::QEvt const * const e) {
    me->subscribe(CONNECTED_SIG);
    me->subscribe(DISCONNECTED_SIG);

    // initialize our pin
    pinMode(7, OUTPUT);
    return Q_TRAN(&StatusLed::red);
}
// @(/1/4/3/1) ...............................................................
QP::QState StatusLed::red(StatusLed * const me, QP::QEvt const * const e) {
    QP::QState status;
    switch (e->sig) {
        // @(/1/4/3/1)
        case Q_ENTRY_SIG: {
            std::cout << "\tStatusLed: red" << std::endl;

            me->red_on();
            status = Q_HANDLED();
            break;
        }
        // @(/1/4/3/1/0)
        case CONNECTED_SIG: {
            status = Q_TRAN(&StatusLed::green);
            break;
        }
        default: {
            status = Q_SUPER(&QHsm::top);
            break;
        }
    }
    return status;
}
// @(/1/4/3/2) ...............................................................
QP::QState StatusLed::green(StatusLed * const me, QP::QEvt const * const e) {
    QP::QState status;
    switch (e->sig) {
        // @(/1/4/3/2)
        case Q_ENTRY_SIG: {
            std::cout << "\tStatusLed: green" << std::endl;

            me->green_on();
            status = Q_HANDLED();
            break;
        }
        // @(/1/4/3/2/0)
        case DISCONNECTED_SIG: {
            status = Q_TRAN(&StatusLed::red);
            break;
        }
        default: {
            status = Q_SUPER(&QHsm::top);
            break;
        }
    }
    return status;
}


static StatusLed l_statusLed;
QP::QActive * const AO_StatusLed = (QP::QActive *)&l_statusLed;

}
